{"version":3,"sources":["components/movie.js","components/Movieslist.js","components/Moviedetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","key","id","to","Poster","src","poster_path","alt","title","styled","img","Movieslist","state","movies","fetch","res","json","console","log","this","setState","results","MovieGrid","map","Component","div","MovieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","App","basename","className","AppHeader","exact","path","component","Moviedetail","header","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"udAMA,IAwBeA,EAtBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,yBAAKC,IAAKD,EAAME,IACd,kBAAC,IAAD,CAAMC,GAAE,WAAMH,EAAME,KAClB,kBAAC,IAAD,CAAWA,GAAIF,EAAME,IACnB,kBAACE,EAAD,CAAQC,IAAG,UANC,kCAMD,OAAmBL,EAAMM,aAAeC,IAAKP,EAAMQ,YAoBzDJ,EAASK,IAAOC,IAAV,K,8KCCJC,E,4MA3BbC,MAAQ,CACNC,OAAQ,I,6MAKYC,MAAM,8K,cAAlBC,E,gBACeA,EAAIC,O,OAAnBH,E,OACNI,QAAQC,IAAIL,GAEZM,KAAKC,SAAS,CACZP,OAAQA,EAAOQ,U,kDAGjBJ,QAAQC,IAAR,M,+IAKF,OACE,kBAACI,EAAD,KACGH,KAAKP,MAAMC,OAAOU,KAAI,SAACvB,GAAD,OAAY,kBAAC,EAAD,CAAOC,IAAKD,EAAME,GAAIF,MAAOA,Y,GAtB/CwB,aA8BnBF,EAAYb,IAAOgB,IAAV,K,wcC7Bf,IA6CeC,E,4MAzCbd,MAAQ,CACNZ,MAAO,I,6MAKac,MAAM,sCAAD,OAAuCK,KAAKQ,MAAMC,MAAMC,OAAO3B,GAA/D,6D,cAAjBa,E,gBACcA,EAAIC,O,OAAlBhB,E,OAENmB,KAAKC,SAAS,CACZpB,U,kDAGFiB,QAAQC,IAAR,M,+IAIM,IACAlB,EAAUmB,KAAKP,MAAfZ,MACR,OACE,kBAAC8B,EAAD,CAAcC,SAAQ,UAvBN,mCAuBM,OAAqB/B,EAAMgC,gBAE/C,kBAACC,EAAD,KAEE,kBAAC,IAAD,CAAW/B,GAAIF,EAAME,IACnB,kBAACE,EAAD,CAAQC,IAAG,UA7BH,kCA6BG,OAAmBL,EAAMM,aAAeC,IAAKP,EAAMQ,SAGhE,6BACE,4BAAKR,EAAMQ,OACX,4BAAKR,EAAMkC,cACX,2BAAIlC,EAAMmC,iB,GAhCIX,aA4CpBM,EAAerB,IAAOgB,IAAV,KAGI,SAACE,GAAD,OAAWA,EAAMI,YAIjCE,EAAYxB,IAAOgB,IAAV,K,sVC5Cf,IAqBeW,EArBH,kBAEV,kBAAC,IAAD,CAAQC,SAAS,KACf,yBAAKC,UAAU,OAEb,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAMpC,GAAG,KACP,wCAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjC,kBAAC,IAAD,CAAO8B,KAAK,OAAOC,UAAWC,QAUhCJ,EAAY9B,IAAOmC,OAAV,KC3BKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.99463f37.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <div key={movie.id}>\n    <Link to={`/${movie.id}`}>\n      <Overdrive id={movie.id}>\n        <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n      </Overdrive>\n    </Link>\n\n  </div>\n);\n\n\nMovie.propTypes = {\n\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }).isRequired,\n\n};\n\nexport default Movie;\n\nexport const Poster = styled.img`\n  box-shadow: 7px 4px 7px 0px rgba(10,10,10,1);\n`;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Movie from './movie';\n\nclass Movieslist extends Component {\n  state = {\n    movies: [],\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=49351c46224cf6108890d28e7e5f0d50&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1');\n      const movies = await res.json();\n      console.log(movies);\n\n      this.setState({\n        movies: movies.results,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <MovieGrid>\n        {this.state.movies.map((movie) => (<Movie key={movie.id} movie={movie} />))}\n      </MovieGrid>\n    );\n  }\n}\n\nexport default Movieslist;\n\nconst MovieGrid = styled.div` \n  display:grid;\n  padding:1rem;\n  grid-template-columns:repeat(6,1fr);\n  grid-row-gap:1rem;\n\n`;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\nimport { Poster } from './movie';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\n\nclass MovieDetail extends Component {\n  state = {\n    movie: {},\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=49351c46224cf6108890d28e7e5f0d50&language=en-US`);\n      const movie = await res.json();\n\n      this.setState({\n        movie,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const { movie } = this.state;\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n\n        <MovieInfo>\n\n          <Overdrive id={movie.id}>\n            <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n          </Overdrive>\n\n          <div>\n            <h1>{movie.title}</h1>\n            <h3>{movie.release_date}</h3>\n            <p>{movie.overview}</p>\n          </div>\n\n        </MovieInfo>\n\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default MovieDetail;\n\nconst MovieWrapper = styled.div`\n    position:relative;\n    padding-top:50vh;\n    background: url(${(props) => props.backdrop}) no-repeat;\n    background-size:cover;\n`;\n\nconst MovieInfo = styled.div`\n    background:white;\n    text-align:left;\n    padding:2rem 10%;\n    display:flex;\n\n    > div{\n        margin-left:4rem;\n    }\n\n    img{\n        position:relative;\n        top:-5rem;\n    }\n`;\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Movieslist from './components/Movieslist';\nimport Moviedetail from './components/Moviedetail';\n\n\nconst App = () => (\n\n  <Router basename=\"/\">\n    <div className=\"App\">\n\n      <AppHeader>\n        <Link to=\"/\">\n          <h1>movies</h1>\n        </Link>\n      </AppHeader>\n\n      <Switch>\n        <Route exact path=\"/\" component={Movieslist} />\n        <Route path=\"/:id\" component={Moviedetail} />\n      </Switch>\n\n    </div>\n  </Router>\n\n);\n\nexport default App;\n\nconst AppHeader = styled.header`\n  background-color: #111;\n  height:60px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: #EEE;\n\n  a{\n    color:inherit;\n    text-decoration:none;\n    font-size:1rem;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}